<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" style="position:absolute;width:0;height:0;overflow:hidden"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  // https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
  // No hit in performance or memory usage according to our tests
  setInterval(() => {
    chrome.runtime.sendMessage('fgddmllnllkalaagkghckoinaemmogpe', { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
      if ((typeof response === 'object') && (typeof response.coords === 'object')) {
        hookedObj.genLat = response.coords.lat;
        hookedObj.genLon = response.coords.lon;
        hookedObj.fakeGeo = response.fakeIt;
      }
    });
  }, 500);
  //]]>
}
          )();</script>
          <defs>
          <symbol id="icon-Arrow2Stroke" viewBox="0 0 58 32"><path fill="#fff" style="fill:var(--color1, #fff)" d="M40 2.144 57.6 16 40 29.856V18.4H0v-4.8h40V2.144z"/></symbol>
          <symbol id="icon-nav-burger" viewBox="0 0 47 32"><path fill="none" stroke="#fff" style="stroke:var(--color1, #fff)" stroke-linecap="round" stroke-width="2.909" d="M8.538 5.333h36.553M8.538 24.727h36.553M19.668 15.03h25.423"/></symbol>
          <symbol id="icon-arrow-narrow-up-right" viewBox="0 0 32 32"><path fill="none" stroke="#777" style="stroke:var(--color2, #777)" stroke-linejoin="round" stroke-linecap="round" stroke-width="2.08" d="M8 24 24 8M13.333 8H24v10.667"/></symbol>
          <symbol id="icon-logo" viewBox="0 0 203 32"><path fill="#fff" style="fill:var(--color1, #fff)" d="M16.534 17.72H5.332v10.588H0V3.2h18.146v4.386H5.333v5.71h11.202v4.424zM27.344 24.678c3.031 0 4.565-1.891 4.565-5.672s-1.535-5.634-4.565-5.634c-3.031 0-4.565 1.853-4.565 5.634s1.535 5.672 4.565 5.672zm0 4.122c-6.1 0-9.706-4.008-9.706-9.794 0-5.899 3.721-9.794 9.706-9.794 5.908 0 9.591 3.857 9.591 9.794 0 5.899-3.721 9.794-9.591 9.794zM50.71 21.578h5.026c-.537 4.311-4.105 7.222-8.67 7.222-5.141 0-8.67-3.365-8.67-10.021s3.529-9.567 8.824-9.567c4.91 0 8.248 2.76 8.555 7.147H50.75c-.269-1.928-1.688-3.063-3.568-3.063-2.11 0-3.836 1.323-3.836 5.37s1.726 6.012 3.683 6.012 3.491-1.096 3.683-3.101zM74.205 28.308h-4.719v-2.609c-1.304 2.118-3.261 3.101-5.869 3.101-3.76 0-6.407-2.76-6.407-6.844V9.704h4.987v11.495c0 2.344 1.074 3.479 3.184 3.479 2.532 0 3.875-1.777 3.875-4.235V9.704h4.949v18.605zM92.542 15.338h-4.795c-.268-1.815-1.266-2.458-3.529-2.458-1.88 0-2.954.454-2.954 1.55s1.036 1.55 3.069 2.118c2.148.605 4.182 1.021 5.639 1.588 1.995.794 3.107 2.08 3.107 4.5 0 3.857-2.877 6.164-8.248 6.164-5.793 0-9.015-2.685-9.092-6.466h5.141c0 1.74 1.496 2.76 3.913 2.76 1.765 0 3.338-.529 3.338-1.928 0-1.324-1.419-1.74-3.031-2.118-3.184-.756-4.949-1.286-6.292-2.118-1.765-1.097-2.378-2.533-2.378-4.197 0-3.139 2.187-5.521 7.941-5.521 5.448 0 7.903 2.118 8.171 6.126zM99.704 28.308h-5.332v-5.105h5.332v5.105zM118.061 17.72h-11.202v10.588h-5.332V3.2h18.146v4.386H106.86v5.71h11.202v4.424zM125.249 28.308h-4.987V9.703h4.68v2.231c1.65-2.496 3.568-2.723 5.601-2.723h.652v5.029a8.463 8.463 0 0 0-1.381-.113c-3.069 0-4.565 1.513-4.565 4.5v9.68zM143.083 21.237l.038-2.042c-.499.492-1.381.756-3.223 1.097-2.839.529-3.76 1.324-3.76 2.912 0 1.399.844 2.08 2.417 2.08 2.57 0 4.488-1.853 4.527-4.046zm5.025 7.071h-4.642c-.153-.454-.268-1.097-.307-1.664-1.189 1.286-3.184 2.155-5.716 2.155-4.297 0-6.292-2.08-6.292-5.105 0-5.37 3.644-5.975 8.67-6.655 2.494-.34 3.184-.832 3.184-2.118 0-1.21-1.228-1.928-3.184-1.928-2.263 0-3.184 1.097-3.414 2.76h-4.642c.077-3.857 2.225-6.542 8.286-6.542 5.985 0 8.056 2.647 8.056 7.336v11.76zM177.315 28.308h-4.872V17.039c0-2.231-1.189-3.819-2.954-3.819-1.842 0-3.184 1.702-3.184 3.971v11.117h-4.987V17.115c0-2.987-.806-3.744-2.993-3.744-1.995 0-3.031 1.21-3.031 3.63v11.306h-4.987V9.702h4.68v2.723c1.266-2.458 3.031-3.214 5.524-3.214 2.571 0 3.798.794 5.256 2.949 1.035-2.042 2.723-2.949 5.102-2.949 3.798 0 6.445 2.723 6.445 6.201v12.895zM183.949 17.191h7.71c-.077-2.76-1.918-4.084-3.875-4.084-1.994 0-3.643 1.513-3.835 4.084zm12.851 3.101h-13.005c.154 2.798 1.765 4.613 4.219 4.613 1.611 0 3.03-.794 3.376-2.08h5.141c-1.15 3.819-4.258 5.975-8.286 5.975-6.291 0-9.437-3.403-9.437-10.134 0-5.748 3.338-9.454 9.13-9.454 5.794 0 8.862 3.706 8.862 11.079z"/></symbol>
          <symbol id="icon-bi_camera-fill" viewBox="0 0 32 32"><path fill="#bea69e" style="fill:var(--color3, #bea69e)" opacity=".4" d="M21 17a4.997 4.997 0 0 1-5 5 5.002 5.002 0 0 1-5-5 4.998 4.998 0 0 1 8.536-3.536A4.998 4.998 0 0 1 21 17z"/><path fill="#bea69e" style="fill:var(--color3, #bea69e)" opacity=".4" d="M4 8a4.003 4.003 0 0 0-4 4v12a4.003 4.003 0 0 0 4 4h24a4.003 4.003 0 0 0 4-4V12a4.003 4.003 0 0 0-4-4h-2.344a4 4 0 0 1-2.828-1.172l-1.656-1.656A4 4 0 0 0 18.344 4h-4.688a4 4 0 0 0-2.828 1.172L9.172 6.828A4 4 0 0 1 6.344 8H4zm1 4a.997.997 0 0 1-1-1 .997.997 0 0 1 1-1 .997.997 0 0 1 1 1 .997.997 0 0 1-1 1zm18 5a6.999 6.999 0 1 1-14 0 7.003 7.003 0 0 1 7-7 7.003 7.003 0 0 1 7 7z"/></symbol>
          <symbol id="icon-star1" viewBox="0 0 32 32"><path fill="#bea69e" style="fill:var(--color3, #bea69e);stroke:var(--color3, #bea69e)" stroke="#bea69e" stroke-linejoin="round" stroke-linecap="round" stroke-width="3" d="m16 4 3.708 7.899L28 13.173l-6 6.145 1.416 8.681L16 23.898l-7.416 4.101L10 19.318l-6-6.145 8.292-1.274L16 4z"/></symbol>
          <symbol id="icon-star2" viewBox="0 0 32 32"><path fill="#fff" style="fill:var(--color1, #fff)" opacity=".2" stroke-linejoin="round" stroke-linecap="round" stroke-width="3" stroke="#000" d="m16 4 3.708 7.899L28 13.173l-6 6.145 1.416 8.681L16 23.898l-7.416 4.101L10 19.318l-6-6.145 8.292-1.274L16 4z"/></symbol>
          <symbol id="icon-x" viewBox="0 0 32 32"><path stroke-linejoin="round" stroke-linecap="round" stroke-width="2.4" d="M24 8 8 24M8 8l16 16"/></symbol>
          <symbol id="icon-Vector" viewBox="0 0 34 32"><path stroke-linejoin="round" stroke-linecap="round" stroke-width="2.526" d="m16.842 2.807 4.337 8.786 9.698 1.418-7.018 6.835 1.656 9.656-8.674-4.562-8.674 4.562 1.656-9.656-7.018-6.835 9.698-1.418 4.337-8.786z"/></symbol>
          </defs>
          </svg>